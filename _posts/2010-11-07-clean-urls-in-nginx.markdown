--- 
layout: post
title: Clean URL's in Nginx
wordpress_id: 1249
wordpress_url: http://www.travisberry.com/?p=1249
categories: 
- title: Uncategorized
  slug: uncategorized
  autoslug: uncategorized
tags: []
image: "http://content.travisberry.com/soap.jpg"
---
[![](http://content.travisberry.com/soap.jpg "soap")](http://www.flickr.com/photos/wwworks/612350664 /)Quick post to let everyone know of a good trick I just figured out. Most clean URL's are created through a rewrite and query page that does all the work. Sometimes though you just want to have a couple php scripts that you can link to like http://www.travisberry.com/example<!--more-->In Apache this is trivial. In Nginx, you can spend a couple days trying to get right. Turns out the solution is simple. If you use a block of code like this[cc lang="php"]## Parse all .php file in the /var/www directorylocation ~ \.php$       location ~ \.php$ {       fastcgi_split_path_info ^(.+\.php)(.*)$;        fastcgi_pass 127.0.0.1:9000;        fastcgi_index  index.php;        fastcgi_param  SCRIPT_FILENAME  /var/www$fastcgi_script_name;        include fastcgi_params;        fastcgi_param  QUERY_STRING     $query_string;        fastcgi_param  REQUEST_METHOD   $request_method;        fastcgi_param  CONTENT_TYPE     $content_type;        fastcgi_param  CONTENT_LENGTH   $content_length;        fastcgi_intercept_errors        on;        fastcgi_ignore_client_abort     off;        fastcgi_connect_timeout 60;        fastcgi_send_timeout 180;        fastcgi_read_timeout 180;        fastcgi_buffer_size 128k;        fastcgi_buffers 4 256k;        fastcgi_busy_buffers_size 256k;        fastcgi_temp_file_write_size 256k;    }[/cc]to turn on PHP, just replace the location with[cc lang="php"]location ~ $[/cc]and comment out[cc lang="php"]##fastcgi_split_path_info ^(.+\.php)(.*)$;[/cc]Your code block should now look like[cc lang="php"]## Parse all .php file in the /var/www directorylocation ~ \.php$       location ~ $ {       ##fastcgi_split_path_info ^(.+\.php)(.*)$;        fastcgi_pass 127.0.0.1:9000;        fastcgi_index  index.php;        fastcgi_param  SCRIPT_FILENAME  /var/www$fastcgi_script_name;        include fastcgi_params;        fastcgi_param  QUERY_STRING     $query_string;        fastcgi_param  REQUEST_METHOD   $request_method;        fastcgi_param  CONTENT_TYPE     $content_type;        fastcgi_param  CONTENT_LENGTH   $content_length;        fastcgi_intercept_errors        on;        fastcgi_ignore_client_abort     off;        fastcgi_connect_timeout 60;        fastcgi_send_timeout 180;        fastcgi_read_timeout 180;        fastcgi_buffer_size 128k;        fastcgi_buffers 4 256k;        fastcgi_busy_buffers_size 256k;        fastcgi_temp_file_write_size 256k;    }[/cc]Now instead of linking to /example.php, you can save the file with no extension, put it on your server, and link to /exampleNginx will now handle files without and extension as PHP files. This is a solution that will only fit a limited number of use cases, but compared to writing a rewrite wrapper, this is quick and easy.<script>utmx_section("contact1")</script><div id="contactme"><div class="avatar">![](http://www.gravatar.com/avatar/c9e8248c1237949b66a735bed64ae841?s=32&d=identicon&r=G)</div>I'm just a guy interested in all things design and web related. You should [contact me](http://www.travisberry.com/contact/) about about this article, for freelance work, or for any reason.</div>
